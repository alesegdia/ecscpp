
* Organize data folder

* System has to have access to delete and create entities

* Now, you can only create entities via the GameWorld, so
  there should be access from System to GameWorld. This is
  impossible since GameWorld includes System, so we have to
  find a workaround for this.

* One option is making the entity creation a global, so you
  just:
  	- SpawnEnemy()
  	- DeleteEntity(enemy)
  	- SpawnPowerup(Powerup.Health, xpos, ypos)
	- SpawnPowerup(Powerup.Ammo, ypos)
	- SpawnLaser(xpos, ypos, speed)

* Other option is to make an interface object between systems
  and EntityFactory, but we should keep the entity handling
  on the

System -> EntityFactory ->
System -> GameWorld (delete entity, here we have the pools)

* System: need entity for knowing if this system affects it and
		  register it.
* EntityFactory/Whatever: need entity for knowing when it goes
						  out of the game

* Solution for System: include a static EntityFactory object

* Problem: you have to clean the entity from the pool
		   a good thing would be that you could have
		   Systems and Pools access so that you could
		   with:
	- System: notify added and deleted
	- Pool: checkin and checkout entity
 The pool should be with EntityFactory so that you can create
 the entities, but that way we're forced to couple system
 and entity pool. We can do this anyway by setting that
 static object reference to EntityFactory: have the pool
 controlled, but EF can't include system, so can't notify other
 systems. We NEED circular reference here.

* Option X: make a Logic module that handles interfacing, This
		    could led us to failure because circular
* Option Y: 

* Pensar en algo para informar a las entidades y a quien haga falta del manejo de teclado, y no hacerlo
  con SDL_GetKeyboardState, que podria no funcionar en el caso por ejemplo de un menu in game, se detectaria
  las teclas del jugador en el menu y actuaria!

* Hacer un formato de fichero para las entidades?
* LUA?

